{"version":3,"sources":["serviceWorker.js","components/ErrorBoundry.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ErrorBoundry","props","hasError","info","this","setState","children","Component","Card","id","name","email","username","className","src","alt","CardList","robotCards","robots","map","robot","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","App","onRequestRobots","searchfield","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","toLocaleLowerCase","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","response","json","users","err","initialStateSearch","initialStateRobots","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.addc77bb.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    };\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({\r\n      hasError: true\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return this.state.hasError ? (\r\n      <h1>GENERAL FAILURE OCCURED</h1>\r\n    ) : (\r\n      this.props.children\r\n    );\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React from 'react';\r\n\r\nconst Card = ({ id, name, email, username }) => {\r\n  return (\r\n    <div className=\"bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5 tc\">\r\n      <img src={`https://robohash.org/${username}?size=200x200`} alt=\"robot\" />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  const robotCards = robots.map(robot => (\r\n    <Card\r\n      key={robot.id}\r\n      id={robot.id}\r\n      name={robot.name}\r\n      email={robot.email}\r\n      username={robot.username}\r\n    />\r\n  ));\r\n\r\n  return <div>{robotCards}</div>;\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  return (\r\n    <div className=\"pa2\">\r\n      <input\r\n        type=\"search\"\r\n        name=\"search\"\r\n        id=\"searchbox\"\r\n        className=\"pa3 ba b--green bg-lightest-blue\"\r\n        placeholder=\"search robots\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll = props => {\r\n  return (\r\n    <div\r\n      style={{\r\n        overflowY: 'scroll',\r\n        border: '1px solid black',\r\n        height: '65vh'\r\n      }}\r\n    >\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport './App.css';\r\n\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nclass App extends Component {\r\n  componentDidMount() {\r\n    this.props.onRequestRobots();\r\n  }\r\n\r\n  render() {\r\n    const { robots, searchfield, onSearchChange, isPending } = this.props;\r\n    const filteredRobots = robots.filter(robot =>\r\n      robot.name.toLowerCase().includes(searchfield.toLocaleLowerCase())\r\n    );\r\n\r\n    return isPending ? (\r\n      <h1 className=\"tc\">Loading</h1>\r\n    ) : (\r\n      <div className=\"tc\">\r\n        <h1>RoboGanG</h1>\r\n        <SearchBox searchChange={onSearchChange} />\r\n        <Scroll>\r\n          <ErrorBoundry>\r\n            <CardList robots={filteredRobots} />\r\n          </ErrorBoundry>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchfield: state.searchRobots.searchfield,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onSearchChange: event => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = text => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n});\r\n\r\nexport const requestRobots = () => dispatch => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(users =>\r\n      dispatch({\r\n        type: REQUEST_ROBOTS_SUCCESS,\r\n        payload: users\r\n      })\r\n    )\r\n    .catch(err =>\r\n      dispatch({\r\n        type: REQUEST_ROBOTS_FAILED,\r\n        payload: err\r\n      })\r\n    );\r\n};\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n  searchfield: ''\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchfield: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: ''\r\n};\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return Object.assign({}, state, { isPending: true });\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return Object.assign({}, state, {\r\n        robots: action.payload,\r\n        isPending: false\r\n      });\r\n    case REQUEST_ROBOTS_FAILED:\r\n      return Object.assign({}, state, {\r\n        error: action.payload,\r\n        isPending: false\r\n      });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\n\nimport './index.css';\n\nimport App from './containers/App';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}